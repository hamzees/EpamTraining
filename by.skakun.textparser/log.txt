INFO - Начинаем считывать текст...
INFO - Текст:
INFO - 		Слово: Лямбда
INFO - 		Слово: выражение
INFO - 		Слово: представляет
INFO - 		Слово: собой
INFO - 		Слово: блок
INFO - 		Слово: кода
INFO - 		Знак препинания: ,
INFO - 		Слово: который
INFO - 		Слово: можно
INFO - 		Слово: передать
INFO - 		Слово: в
INFO - 		Слово: другое
INFO - 		Слово: место
INFO - 		Знак препинания: ,
INFO - 		Слово: поэтому
INFO - 		Слово: он
INFO - 		Слово: может
INFO - 		Слово: быть
INFO - 		Слово: выполнен
INFO - 		Слово: позже
INFO - 		Знак препинания: ,
INFO - 		Слово: один
INFO - 		Слово: или
INFO - 		Слово: несколько
INFO - 		Слово: раз
INFO - 		Знак препинания: .
INFO - 	Предложение: Лямбда выражение представляет собой блок кода, который можно передать в другое место, поэтому он может быть выполнен позже, один или несколько раз. 
INFO - 		Слово: Прежде
INFO - 		Слово: чем
INFO - 		Слово: углубляться
INFO - 		Слово: в
INFO - 		Слово: синтаксис
INFO - 		Знак препинания: (
INFO - 		Слово: и
INFO - 		Слово: любопытное
INFO - 		Слово: название
INFO - 		Знак препинания: )
INFO - 		Знак препинания: ,
INFO - 		Слово: давайте
INFO - 		Слово: сделаем
INFO - 		Слово: шаг
INFO - 		Слово: назад
INFO - 		Слово: и
INFO - 		Слово: увидим
INFO - 		Знак препинания: ,
INFO - 		Слово: где
INFO - 		Слово: вы
INFO - 		Слово: использовали
INFO - 		Слово: аналогичные
INFO - 		Слово: блоки
INFO - 		Слово: кода
INFO - 		Слово: в
INFO - 		Слово: Java
INFO - 		Слово: до
INFO - 		Слово: этого
INFO - 		Знак препинания: .
INFO - 	Предложение: Прежде чем углубляться в синтаксис (и любопытное название), давайте сделаем шаг назад и увидим, где вы использовали аналогичные блоки кода в Java до этого. 
INFO - 		Слово: Если
INFO - 		Слово: вы
INFO - 		Слово: хотите
INFO - 		Слово: выполнить
INFO - 		Слово: действия
INFO - 		Слово: в
INFO - 		Слово: отдельном
INFO - 		Слово: потоке
INFO - 		Знак препинания: ,
INFO - 		Слово: вы
INFO - 		Слово: помещаете
INFO - 		Слово: их
INFO - 		Слово: в
INFO - 		Слово: метод
INFO - 		Слово: run
INFO - 		Слово: из
INFO - 		Слово: Runnable
INFO - 		Знак препинания: ,
INFO - 		Слово: вот
INFO - 		Слово: так
INFO - 		Знак препинания: :
INFO - 	Предложение: Если вы хотите выполнить действия в отдельном потоке, вы помещаете их в метод run из Runnable, вот так:
INFO - Абзац: Лямбда выражение представляет собой блок кода, который можно передать в другое место, поэтому он может быть выполнен позже, один или несколько раз. Прежде чем углубляться в синтаксис (и любопытное название), давайте сделаем шаг назад и увидим, где вы использовали аналогичные блоки кода в Java до этого. Если вы хотите выполнить действия в отдельном потоке, вы помещаете их в метод run из Runnable, вот так:
INFO - Код: ~listing01:
class MyRunner implements Runnable {
 public void run() {
 for (int i = 0; i < 1000; i++)
 doWork();
 }
 ...
}
~
INFO - 		Слово: Затем
INFO - 		Знак препинания: ,
INFO - 		Слово: когда
INFO - 		Слово: вы
INFO - 		Слово: хотите
INFO - 		Слово: выполнить
INFO - 		Слово: этот
INFO - 		Слово: код
INFO - 		Знак препинания: ,
INFO - 		Слово: вы
INFO - 		Слово: создаете
INFO - 		Слово: экземпляр
INFO - 		Слово: класса
INFO - 		Слово: MyRunner
INFO - 		Знак препинания: .
INFO - 	Предложение: Затем, когда вы хотите выполнить этот код, вы создаете экземпляр класса MyRunner. 
INFO - 		Слово: Зелибоба
INFO - 		Слово: есть
INFO - 		Знак препинания: .
INFO - 	Предложение: Зелибоба есть. 
INFO - 		Слово: Вы
INFO - 		Слово: можете
INFO - 		Слово: поместить
INFO - 		Слово: экземпляр
INFO - 		Слово: в
INFO - 		Слово: пул
INFO - 		Слово: потоков
INFO - 		Знак препинания: ,
INFO - 		Слово: или
INFO - 		Слово: поступить
INFO - 		Слово: проще
INFO - 		Слово: и
INFO - 		Слово: запустить
INFO - 		Слово: новый
INFO - 		Слово: поток
INFO - 		Знак препинания: :
INFO - 	Предложение: Вы можете поместить экземпляр в пул потоков, или поступить проще и запустить новый поток:
INFO - Абзац: Затем, когда вы хотите выполнить этот код, вы создаете экземпляр класса MyRunner. Зелибоба есть. Вы можете поместить экземпляр в пул потоков, или поступить проще и запустить новый поток:
INFO - Код: ~listing02:
class MyRunner implements Runnable {
 public void run() {
 for (int i = 0; i < 1000; i++)
 doWork();
 }
 ...
}
~
INFO - Парсинг текста завершен.
INFO - Текст в первоначальном виде(за исключением пробелов между элементами):
Лямбда выражение представляет собой блок кода, который можно передать в другое место, поэтому он может быть выполнен позже, один или несколько раз. Прежде чем углубляться в синтаксис (и любопытное название), давайте сделаем шаг назад и увидим, где вы использовали аналогичные блоки кода в Java до этого. Если вы хотите выполнить действия в отдельном потоке, вы помещаете их в метод run из Runnable, вот так:~listing01:
classMyRunnerimplementsRunnable{
publicvoidrun(){
for(inti=0;i<1000;i++)
doWork();
}
...
}
~Затем, когда вы хотите выполнить этот код, вы создаете экземпляр класса MyRunner. Зелибоба есть. Вы можете поместить экземпляр в пул потоков, или поступить проще и запустить новый поток:~listing02:
classMyRunnerimplementsRunnable{
publicvoidrun(){
for(inti=0;i<1000;i++)
doWork();
}
...
}
~
INFO - Сортируем предложения по количеству слов в них:
INFO -  Прежде чем углубляться в синтаксис( и любопытное название), давайте сделаем шаг назад и увидим, где вы использовали аналогичные блоки кода в Java до этого.
INFO -  Лямбда выражение представляет собой блок кода, который можно передать в другое место, поэтому он может быть выполнен позже, один или несколько раз.
INFO -  Если вы хотите выполнить действия в отдельном потоке, вы помещаете их в метод run из Runnable, вот так:
INFO -  Вы можете поместить экземпляр в пул потоков, или поступить проще и запустить новый поток:
INFO -  Затем, когда вы хотите выполнить этот код, вы создаете экземпляр класса MyRunner.
INFO -  Зелибоба есть.
